/*
 * Created on 2025-09-24 ( 23:19:49 )
 * Generated by Telosys ( https://www.telosys.org/ ) version 4.2.0
 */
package memoire.api.memoire_licence.controllers;

import java.util.List;

import memoire.api.memoire_licence.dto.response.EvaluationDTO;
import memoire.api.memoire_licence.services.EvaluationService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;



@RestController
@RequestMapping(value = "/api/v1/evaluation", produces = MediaType.APPLICATION_JSON_VALUE)
public class EvaluationRestController {

	private static final Logger logger = LoggerFactory.getLogger(EvaluationRestController.class);

	@Autowired
	private EvaluationService service ; // injected

    
	/**
	 * Get ALL
	 *
	 * @return
	 */
	@GetMapping("")
	protected ResponseEntity<List<EvaluationDTO>> findAll() {
    	logger.debug("REST : GET - findAll");
    	List<EvaluationDTO> list = service.findAll();
    	return ResponseEntity.ok(list); // always 200
    }
    
    /**
     * Get ONE identified by the given PK
	 *
	 * @param idevaluation
     * @return 200 or 404 
     */
    @GetMapping("/{idevaluation}")
    protected ResponseEntity<EvaluationDTO> findById(@PathVariable int idevaluation) {
    	logger.debug("REST : GET - findById");
    	EvaluationDTO evaluationDTO = service.findById(idevaluation);
		if ( evaluationDTO != null ) {
			return ResponseEntity.ok(evaluationDTO); // 200 OK, found
		}
		else {
			return ResponseEntity.notFound().build(); // 404 Not found
		}		
    }

    
	/**
 	 * Create if doesn't exist 
	 *
	 * @param evaluationDTO
	 * @return 201 created or 409 conflict
	 */
	@PostMapping("")
	protected ResponseEntity<Void> create(@RequestBody EvaluationDTO evaluationDTO) {
    	logger.debug("REST : POST - create");
		if ( service.create(evaluationDTO) ) {
			return ResponseEntity.status(HttpStatus.CREATED).build(); // 201 created
		}
		else {
			return ResponseEntity.status(HttpStatus.CONFLICT).build(); // 409 Conflict
		}
	}

	/**
	 * Update or create
	 *
	 * @param idevaluation
	 * @param evaluationDTO
	 * @return 200 updated or created
	 */
	@PutMapping("/{idevaluation}")
	protected ResponseEntity<Void> save(@PathVariable int idevaluation, @RequestBody EvaluationDTO evaluationDTO) {
    	logger.debug("REST : PUT - save");
		service.save(idevaluation, evaluationDTO);
		return ResponseEntity.ok().build(); // OK, updated or created
	}

	/**
 	 * Update if exists 
	 *
	 * @param evaluationDTO
	 * @return 200 updated or 404 not found
	 */
	@PutMapping("")
	protected ResponseEntity<Void> update(@RequestBody EvaluationDTO evaluationDTO) {
    	logger.debug("REST : PUT - update");
		if ( service.update(evaluationDTO) ) {
			return ResponseEntity.ok().build(); // 200 OK, found and updated
		}
		else {
			return ResponseEntity.notFound().build(); // 404 Not found = "not updated"
		}
	}

	/**
 	 * Partial update for the given PK (if it exists )
	 *
	 * @param idevaluation
	 * @param evaluationDTO
	 * @return 200 updated or 404 not found
	 */
	@PatchMapping("/{idevaluation}")
	protected ResponseEntity<Void> partialUpdate(@PathVariable int idevaluation, @RequestBody EvaluationDTO evaluationDTO) {
    	logger.debug("REST : PATCH - partialUpdate");
    	if ( service.partialUpdate(idevaluation, evaluationDTO) ) {
    		return ResponseEntity.ok().build(); // OK, found and updated
    	}
    	else {
			return ResponseEntity.notFound().build(); // 404 Not found = "not updated"
    	}
	}

	/**
	 * Delete by PK 
	 *
	 * @param idevaluation
	 * @return 204 deleted or 404 not found
	 */
	@DeleteMapping("/{idevaluation}")
	protected ResponseEntity<Void> deleteById(@PathVariable int idevaluation) {
    	logger.debug("REST : DELETE - deleteById");
		if ( service.deleteById(idevaluation) ) {
			return ResponseEntity.noContent().build(); // 204 No content = "deleted"
		}
		else {
			return ResponseEntity.notFound().build(); // 404 Not found = "not deleted"
		}
	}

}
